
[container]
name = "ai"

welcome_msg = '''
Run
  > su user
  > cd
   >> \. /opt/stable-diffusion-ui/installer_files/env/bin/activate
   >> pip3 install torch torchvision torchaudio
   >> python -c 'import torch ; print("GPU detected: ", torch.cuda.is_available())'
   >> find /opt/stable-diffusion-ui -iname '*libgomp*so*'
   >> cp /opt/stable-diffusion-ui/installer_files/env/lib/python3.8/site-packages/torch/lib/libgomp-a34b3233.so.1 /opt/stable-diffusion-ui/installer_files/env/lib/python3.8/site-packages/torch/lib/_ORIGINAL_libgomp-a34b3233.so.1
   >> ln -s /usr/lib/libgomp.so.1 /opt/stable-diffusion-ui/installer_files/env/lib/python3.8/site-packages/torch/lib/libgomp-a34b3233.so.1
   >> sudo ldconfig
   >> python -c 'import torch ; print("GPU detected: ", torch.cuda.is_available())'
   >> yay -S cuda-11.7
   >> sudo ldconfig
   >> PYTORCH_NVML_BASED_CUDA_CHECK=1 python -c 'import torch ; print("GPU detected: ", torch.cuda.is_available())'
   >>
   >> yay -S extra-testing/python-pytorch-cuda extra-testing/cudnn
   >> python3.12 -c 'import torch ; print("GPU detected: ", torch.cuda.is_available())'
   >>
   >> # See https://aur.archlinux.org/packages/stable-diffusion-web-ui-git#comment-970957
   >> yay -S python311
   >> rm -rf /opt/stable-diffusion-web-ui/venv
   >> python3.11 -m venv /opt/stable-diffusion-web-ui/venv
   >> source /opt/stable-diffusion-web-ui/venv/bin/activate
   >> pip3.11 install wrapt torch torchvision torchaudio
   >> yay -S bc
   >> cd "/opt/stable-diffusion-web-ui" && ./webui.sh
   >>
   >>
  > stable-diffusion-ui-server


'''

runtime_hint = "arch-chroot"

# external scratch disk
disk_partuuids = [
  "e08214f5-cfc5-4252-afee-505dfcd23808"
]

part_subfolder = "containers/ai"

# If root FS is empty or install flag missing, all of these are run as root.
install_setup_cmds = [
  # By default the tarball has a root.x86_64/ folder which we want the contents of placed at {container_root_dir}
  "wget -qO- 'https://dfw.mirror.rackspace.com/archlinux/iso/2024.05.01/archlinux-bootstrap-x86_64.tar.zst' | tar --zstd -xv -C '{container_root_dir}' --strip-components=1",

  # Arch will need a good mirror list to install packages with
  "cp /etc/pacman.d/mirrorlist '{container_root_dir}'/etc/pacman.d/mirrorlist",

  # Enable multilib!
  "SH_IN_CONTAINER: echo '[multilib]' >> /etc/pacman.conf",
  "SH_IN_CONTAINER: echo 'Include = /etc/pacman.d/mirrorlist' >> /etc/pacman.conf",
  # Turn off signature checks
  "SH_IN_CONTAINER: sed -i \"s/SigLevel.*=.*/SigLevel = Never/g\" /etc/pacman.conf",
  # Turn off space check
  "SH_IN_CONTAINER: sed -i \"s/^CheckSpace.*/#CheckSpace/g\" /etc/pacman.conf",

  # Add needs utf-8 locale
  "SH_IN_CONTAINER: echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen",
  "SH_IN_CONTAINER: locale-gen",
  "SH_IN_CONTAINER: echo 'LANG=\"en_US.UTF-8\"' > /etc/locale.conf",

  "SH_IN_CONTAINER: pacman-key --init",
  "SH_IN_CONTAINER: pacman -S archlinux-keyring",
  "SH_IN_CONTAINER: pacman -Syu --noconfirm",

  # Now install packages!
  "SH_IN_CONTAINER: pacman -Sy --noconfirm sudo vim git base-devel python python-pip nvidia cuda opencl-nvidia ",

  # Setup user 'user'
  "SH_IN_CONTAINER: useradd -m -G games,render,input,video,users,dbus,wheel user",
  "SH_IN_CONTAINER: echo \"%wheel ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/enablewheel",

  # We need python 3.10 which is in the AUR
  "SH_IN_CONTAINER: cd /opt ; git clone https://aur.archlinux.org/yay-git.git ; chown -R user:user /opt/yay-git",
  "SH_IN_CONTAINER: sudo -u user sh -c \"cd /opt/yay-git ; makepkg -si --noconfirm \"",
  "SH_IN_CONTAINER: sudo -u user sh -c \"yay -Sy --noconfirm python310 \"",
  "SH_IN_CONTAINER: rm /usr/bin/python3 ; ln -s /usr/bin/python3.10 /usr/bin/python3 ",

  # Ensure pip is available
  "SH_IN_CONTAINER: sudo -u user python -m ensurepip",

  # Addtl packages for GPU
  "SH_IN_CONTAINER: sudo -u user sh -c \"yay -Sy --noconfirm xf86-video-nouveau stable-diffusion-ui python-opencv opencv \"",
  "SH_IN_CONTAINER: cd /usr/lib/pkgconfig/ ; ln -sf opencv4.pc opencv.pc ", # For pip install(s) l8ter


  #"SH_IN_CONTAINER: sudo -u user yay -S --noconfirm stable-diffusion-ui",
  "SH_IN_CONTAINER: sudo -u user yay -S --noconfirm stable-diffusion-web-ui-git",



]

nspawn_addtl_args = [
  "--capability=all",
  # "--capability=CAP_SYS_ADMIN",
  "--bind=/run/user/1000:/run/user/1000",
  "--bind=/var/lib/dbus",
  "--bind=/dev/dri",
  "--bind=/dev/snd",
  "--bind=/tmp",
  "--bind=/dev/nvidia0",
  "--bind=/dev/nvidia1",
  "--bind=/dev/nvidiactl",
  "--bind=/dev/nvidia-modeset",
  "--bind=/dev/nvidia-uvm",
  "--bind=/dev/nvidia-uvm-tools",
  "--bind=/dev/tty2", # used when running from framebuffer to allocate xorg stuffs
  "--user=user", # exec as user user we setup before, we expect it's ID to match our GUI user's ID (1000)
  "--"
]

# base64.b64decode(b'amFtZXNAam1jYXRlZXIucHc=')
# jaistuff


